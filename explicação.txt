                                                        Codigo Limpo habilidades de Agile Software

        Capitulo 1:

    -Custo de código confuso

    O código limpo é um código fácil de entender, modificar e fazer manutenções. Ele tem funções, variáveis e métodos autoexplicativos, mesmo sem usar verbos. Ele ajuda muito 
na hora de ser entendido pela equipe de desenvolvimento. Muitas vezes, as pessoas escrevem um código e depois dizem "mais tarde eu limpo esse código". Porém, de acordo com 
a lei de Leblanc: "mais tarde é igual a nunca". Às vezes, as pessoas fazem isso porque estão cansadas do projeto, sob pressão da gestão, ou por qualquer outro motivo. Não 
importa o quão bom é o projeto de software, se ele não tiver um código legível e fácil de entender, ele vai fracassar. Além disso, os custos só aumentarão com o tempo, junto 
com a baixa produtividade.

    -Quando o código fica um caos

    Já houve casos de códigos que passaram por tantos profissionais, e esses profissionais não tinham nenhuma noção de código limpo. Cada um fazia as coisas de um jeito não 
padronizado, então o código ia virando um Frankenstein até que ninguém entendia nada. Por isso, muitos pediram para replanejar tudo. Normalmente, os gestores não gostam de 
fazer isso, pois exigirá mais tempo, custo e recursos humanos. Por ser um projeto novo, todos querem fazer parte, mas apenas os melhores são escolhidos para que não aconteça 
o mesmo problema de código sujo de antes. Já houve casos onde demorou mais de 10 anos até os profissionais conseguirem terminar o novo projeto, porque além de ter que fazer 
um novo projeto, eles ainda tinham que continuar o antigo até que o novo fizesse as mesmas coisas do antigo.

    -A regra do escoteiro

    Os Escoteiros da América têm uma frase: "Deixe o acampamento mais limpo do que quando você o encontrou". Isso também se aplica à nossa profissão. Nós também podemos deixar 
um código mais limpo e não precisamos fazer grandes mudanças. Se você conseguir mudar o nome de uma variável para algo com mais sentido, ou dividir uma função em partes 
menores, e até diminuir o número de 'ifs' encadeados, tudo isso já vai dar uma melhora muito grande para o código. Com cada um fazendo sua parte, os benefícios são exponenciais 
e até dá gosto e satisfação de trabalhar no projeto.

        Capitulo 2:

    -Nomes significativos

    Na hora de escolher o nome de uma variavel é importante escolher um nome que revela o proposito da variavel

        -Exemplo:

// Bom
let usuarioAtivo = true;
let salarioMensal = 3000;
let diasDaSemana = ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado', 'Domingo'];
let numeroDeFuncionarios = 10;

// Ruim
let a = true; // O que significa "a"?
let s = 3000; // O que significa "s"?
let d = ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado', 'Domingo']; // O que significa "d"?
let n = 10; // O que significa "n"?

é sempre bom evitar:

1)Nomes genéricos ou abreviados: Nomes como data, info, a, b, c não fornecem informações suficientes sobre o propósito da variável. É melhor usar nomes que descrevam claramente o que a variável representa.

2)Nomes muito longos: Embora os nomes das variáveis devam ser descritivos, nomes excessivamente longos podem tornar o código difícil de ler. Tente encontrar um equilíbrio entre clareza e concisão.

3)Uso inconsistente de maiúsculas e minúsculas: Em JavaScript, é comum usar camelCase para nomes de variáveis. A inconsistência no uso de maiúsculas e minúsculas pode levar a erros.

4)Nomes que são palavras-chave reservadas: Em JavaScript, existem certas palavras-chave reservadas, como function, var, let, const, etc. Você deve evitar usar essas palavras-chave como nomes de variáveis.

5)Números no início dos nomes das variáveis: Em muitas linguagens de programação, incluindo JavaScript, os nomes das variáveis não podem começar com números.

6)Nomes de variáveis com espaços: Os nomes das variáveis não devem conter espaços. Em vez disso, você pode usar o sublinhado (_) ou o camelCase para separar as palavras em um nome de variável.

7)Caracteres especiais: Evite usar caracteres especiais em nomes de variáveis, exceto o sublinhado (_) e o cifrão ($).

8) Evite usar nomes de variaveis muito parecidos um com outros pois isso dificulta a leitura.

-Nomes de Classes devem ter substantivos

Exemplos:
Cliente, Conta...

-Nomes de metodos devem ter verbos

Exemplos:

Deletar Paginas, Postar Pagamentos, Salvar Dados 